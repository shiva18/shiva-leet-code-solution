Given an integer array nums, return the number of longest increasing subsequences.
Notice that the sequence has to be strictly increasing.
 
Example 1:
Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].
Example 2:
Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.
Approach:
1. Declare  two array:  
            1. One for max length  length—> init to 1 , since all element is itself of  length 1  of increasing sequence.
            2. One for count for the same length:—>init to 1 , since all element is of  length 1 increasing sequence and its count = 1
            3. 
2. 

int findNumberOfLIS(int* a, int n){
    
    int ls[n] , cnt[n], max_count= 0, max_length = 1, i, j;
    
    if(n < 2)
        return 1;
    
    memset(ls, 0, sizeof(ls));
    memset(ls, 0, sizeof(cnt));
    for(i = 0; i<n; i++){
        ls[i] = 1;
        cnt[i] = 1;    
    }
           
    for(i = 1; i<n; i++){
       
        for(j = 0; j<i; j++){
            //This condition indicate that it is part of same increasing subsequence.
		// count of subsequence will remains are as previous.
            if( (a[i] > a[j]) && (ls[i] < ls[j] +1) ){
                ls[i] = ls[j] + 1;
                cnt[i] = cnt[j];    
                             
            }else if( (a[i] > a[j]) && (ls[i] == ls[j] +1) ){        
			 //This condition indicate that it is another increasing subsequence.
			// count of subsequence will remains are as previous.       
                 cnt[i] = cnt[i] + cnt[j];                  
            }
                             
        }
        max_length = max_length>ls[i]?max_length:ls[i];
               
    }

     for(i = 0; i<n; i++){
       if(ls[i] == max_length)
           max_count +=cnt[i];
    }
    
    return max_count;

}

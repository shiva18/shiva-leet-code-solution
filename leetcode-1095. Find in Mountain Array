int findPeak(MountainArray *mountainArr, int n){
    
    int i, low, high, mid, ret = -1, c, p, nn;
    low = 0;
    high = n-1;
    while(low <= high){
        mid = low + (high -low)/2; 
        //printf(" low = %d high = %d mid = %d \n", low, high, mid);
        c = get(mountainArr, mid);
        p = get(mountainArr, mid-1);
        nn = get(mountainArr, mid+1);
        if( c >p && c > nn )
            return mid;
        else if( c < nn)
            low = mid;
        else
            high = mid;             
    }
    
    return -1;
    
}


int findInMountainArray(int target, MountainArray* mountainArr) {
    
    int l, low, high, ret = -1, pp, c, p, n, mid;
    l = length(mountainArr);
   
    pp = findPeak(mountainArr, l);
    c = get(mountainArr, pp);
    if(c == target)
        return pp;
    low = 0;
    high = pp -1;
    while(low <= high){
        mid = low + (high -low)/2; 
        c = get(mountainArr, mid);
        if(c == target)
            return mid;
        else if( c > target)
            high = mid -1;
        else
            low = mid + 1;
       
    }
	//Search in the second half
    low = pp + 1;
    high =  l -1;
   while(low <= high){
        mid = low + (high -low)/2; 
        c = get(mountainArr, mid);
        if(c == target)
            return mid;
        else if( c > target)
            low = mid + 1;
        else
            high = mid - 1;
       
    }
    
    return -1;
	
}

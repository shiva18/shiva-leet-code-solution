You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:
1. Sort the values at odd indices of nums in non-increasing order.
    * For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.
2. Sort the values at even indices of nums in non-decreasing order.
    * For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.
Return the array formed after rearranging the values of nums.
 
Example 1:
Input: nums = [4,1,2,3]
Output: [2,3,4,1]
Explanation: 
First, we sort the values present at odd indices (1 and 3) in non-increasing order.
So, nums changes from [4,1,2,3] to [4,3,2,1].
Next, we sort the values present at even indices (0 and 2) in non-decreasing order.
So, nums changes from [4,1,2,3] to [2,3,4,1].
Thus, the array formed after rearranging the values is [2,3,4,1].

Approach:
Problem can be solved by sorting.
I am using heap sort here.
Runtime: 12 ms, faster than 93.75% of C online submissions for Sort Even and Odd Indices Independently.
Memory Usage: 6.9 MB, less than 21.88% of C online submissions for Sort Even and Odd Indices Independently.




/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
void heapyfy(int *a, int n, int i){
    
    int largest = i, temp;
    int l = 2*i + 1;
    int r = 2*i + 2;
    if( l < n && a[l] > a[largest])
        largest = l;
    if( r < n && a[r] > a[largest])
        largest = r;
    if(i != largest){
        temp = a[i];
        a[i] = a[largest];
        a[largest] = temp;
        heapyfy(a,n, largest);
    }

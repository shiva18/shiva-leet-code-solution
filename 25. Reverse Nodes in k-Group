Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
void reversek(struct ListNode* head, int k){
     
    if( head == NULL || head->next == NULL || k == 1)
        return ;
    
    struct ListNode* temp, *cur, *next, *start, *result= NULL, *nexts, *end;
    int n = k;
 //point start to the first node of the list which need to be reversed
    start = temp = head->next;
    while(temp!= NULL && n>1){
        temp = temp->next;
        n--;
    }
    if(temp == NULL)
        return;
    //Point to end of the current group;
    end = temp;
    
    //save the start of the next group
    nexts = temp->next;
    //cut the current group
    temp->next = NULL;
    //Point to first of the current group to be reverse
    cur = head->next;
    
    //Reverse current group
    while(cur){
        next = cur->next;
        cur->next = result;
        result = cur;
        cur = next;        
    }    
    head->next= result;
    start->next = nexts;
    reversek(start, k);
    return;
    
}

struct ListNode* reverseKGroup(struct ListNode* head, int k){
    
    if( head == NULL || head->next == NULL || k == 1)
        return head;
  
    struct ListNode* temp = (struct ListNode*)calloc(1, sizeof(struct ListNode));
    temp->next = head;
    
    reversek(temp, k);
    return temp->next; 
    

}

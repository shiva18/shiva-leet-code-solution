78. Subsets
https://leetcode.com/problems/subsets/description/

Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.
 
Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:
Input: nums = [0]
Output: [[],[0]]


/*
 Total number of combination is = pow(2,n) OR 1<<n 
 index is representating the number of element in each row.
 */
int** subsets(int* nums, int n, int* returnSize, int** returnColumnSizes){

    int len = 1<< n;
    int i, j, index;
    (*returnSize) = len;
    (*returnColumnSizes) = (int *)calloc(len, sizeof(int));
    int **result = (int *)calloc(len, sizeof(int *));
    for(i = 0; i<len; i++){
        result[i] = (int *)calloc(n, sizeof(int) );
    }
    /* 
    i represent row 
    for [1,2,3]
    for row zero:  0 0 0 row 1=  0 0 1 --> Only last element() will be present in the this row.
    index is representating the number of element in each row of the result.
    */
    for(i = 0; i<len; i++){
        index = 0;
        for(j = 0; j<n; j++){
            if( (1<<j) & i ){
                result[i][index++] = nums[j];
            } 
        }
        (*returnColumnSizes)[i] = index;
    }
    return result;
}


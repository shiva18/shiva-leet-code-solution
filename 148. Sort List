Given the head of a linked list, return the list after sorting it in ascending order.
Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

struct ListNode* merge(struct ListNode* l1, struct ListNode* l2){
    struct ListNode* temp = (struct ListNode*)calloc(1, sizeof(struct ListNode));
    struct ListNode *cur = temp;
    temp->next = NULL;
    while(l1 && l2){
        if(l1->val < l2->val){
            temp->next = l1;
            l1 = l1->next;
        }else{
            temp->next = l2;
            l2 = l2->next;
        }
        temp = temp->next;
    }
    temp->next = (l1 == NULL)?l2:l1;
    return cur->next;

}

struct ListNode* split(struct ListNode *head){
    if(head == NULL || head->next == NULL ) 
        return head;
    struct ListNode *s, *f, *p;
    s = f = head;
    while(f && f->next != NULL){
        f= f->next->next;
        p = s;
        s = s->next;
    }
    p->next = NULL;
    return s;

}


struct ListNode* sortList(struct ListNode* head){

    if(head == NULL || head->next == NULL ) 
        return head;
    
    struct ListNode *mid = split(head);;
    struct ListNode *l1 = sortList(head);
    struct ListNode *l2  = sortList(mid);
    return merge(l1, l2);
}

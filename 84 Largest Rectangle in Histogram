//Stack Implementation
struct stack{
    int a[100000];
    int top;
};

struct stack sta;


void init(){
    sta.top = -1;
    
}
void push(int val){
    
    if(sta.top >= 50){
        printf("stack is full\n");
        return;
    }
     
    sta.top++;
    sta.a[sta.top]= val;
    return;
}
int pop(int op){
    
    int ret = 0;
    if(sta.top == -1){
        return -1;
    }
    if(op==1){
        ret = sta.a[sta.top--];
        return ret;
    }else{
        ret = sta.a[sta.top];
        return ret;
    }
    
}


int largestRectangleArea(int* a, int n){
    int i, j, h = 0, max_area= 0, c_area= 0,width=0, minh=0, cur= 0, temp= 0;
    if(a == NULL)
        return 0;
    if(n == 1)
        return a[0];
    
    push(0);
    
   //Keep pushing the array index (Not actual element ) on  stack if array element is greater than stack top element 
    for (i = 1; i<n; i++){
        cur = a[i];
        if(cur >= a[pop(0)]){
           push(i);
        }else{
            while( (sta.top > -1) && cur < a[pop(0)]  ){
               
                temp = a[pop(1)];
                //Empty stack
                if(sta.top == -1){
                    c_area =  temp * i;
                }else{
                    c_area = temp*(i - pop(0) -1 );
                }
                if( c_area > max_area)
                    max_area = c_area;
                }
            push(i);
        }
        
    }
    i = n -1 ;
    
   //Process Reamaing element 
    if(sta.top != -1){
        while (sta.top != -1){
                           temp = a[pop(1)];
                           //Empty stack
                            c_area = temp * (i-pop(0));
                           if( c_area > max_area)
                               max_area = c_area;

        }
    }
   
    return max_area;
   
   
}

Solution without using array as stack
int largestRectangleArea(int* h, int n){
    
    if(h == NULL)
        return 0;
    if(n == 1)
        return h[0];
    
    int sh[100000], i, cur_area = 0, max_area = INT_MIN, top = -1, index = 0;
    bzero(sh, sizeof(sh));
    //Pushing 0th index to stack
    sh[++top] = 0;
    for(i = 1; i<n; i++){
        
        if( h[i] >= h[ sh[top]] ){
            sh[++top] = i;
        }else{
            while( (top>= 0) && h[sh[top]] > h[i] ){
                index = sh[top--];
                if(top == -1)
                    cur_area = i *h[index];
                else
                    cur_area = (i - sh[top] -1)*h[index];
                if( cur_area > max_area )
                    max_area = cur_area;
            }
            sh[++top] = i;
            
        }
           
    }
    //Process remaining Element left at stack
    
    while( (top>= 0) ){
        index = sh[top--];
        if(top == -1)
            cur_area = i *h[index];
        else
            cur_area = (i - sh[top] -1 )*h[index];
        if( cur_area > max_area )
            max_area = cur_area;
    }
    
     return max_area;

}

https://leetcode.com/problems/sum-of-all-subset-xor-totals/description/
The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.
* For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.
Given an array nums, return the sum of all XOR totals for every subset of nums. 
Note: Subsets with the same elements should be counted multiple times.
An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.
 
Example 1:
Input: nums = [1,3]
Output: 6
Explanation: The 4 subsets of [1,3] are:
- The empty subset has an XOR total of 0.
- [1] has an XOR total of 1.
- [3] has an XOR total of 3.
- [1,3] has an XOR total of 1 XOR 3 = 2.
0 + 1 + 3 + 2 = 6
Approach:
Create all subset of the array and find XOR of the every subset

int subsetXORSum(int* a, int n){

    int sum = 0, i, xsum[n], j, cxor= 0, len = 1<<n ;
/* len represent number of possible subset possible with the array  element  of all possible length
	00, 01,10,11
	0 0,  0 3, 1 0, 1 3 
*/
    for(i = 0; i< len; i++){
        cxor = 0; 
        for(j = 0; j<n; j++){
            if( (1<<j) & i){
                cxor = cxor ^ a[j];                
            }            
        } 
        sum += cxor;
    }
    return sum;

}

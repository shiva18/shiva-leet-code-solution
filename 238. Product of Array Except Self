Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.
 
Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
Approach:
1. Find left product array—> Product of the element before the element. Assuming before 0th index array has element of value 1.
3. Find right product array—> Product of the element before the element. Assuming right side array has element of value 1.
4. Multiply the both array to get answer.

int* productExceptSelf(int* a, int n, int* returnSize){
    
    *returnSize = n;
    int i, left[n], right[n] , prod = 1;
    
    left[0] = right[n-1] = 1;
    
    for(i = 1; i<n; i++)        
        left[i] = left[i-1] * a[i-1];
       
     
    for(i = n-2; i >=0; i--)
        right[i] = right[i+1] * a[i+1];
       
     for(i = 0; i<n; i++)
         a[i] = left[i] * right[i];
    
    
    return a;

}
